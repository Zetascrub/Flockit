import re
from datetime import datetime
from utils.common import print_status


# --- Generates markdown reports & summary ---
class Owl:
    def __init__(self, targets, results, output_path):
        self.targets = targets
        self.results = results
        self.output_path = output_path

    def generate_report(self):
        print_status("[+] Generating report...", "info")
        report_md = f"# Internal Network Scan Report\n\n"
        report_md += f"**Scan Date:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n"
        report_md += f"**Targets:** {self.targets}\n\n"
        if not self.results:
            print_status("[-] No scan results to report.", "warning")
            return
        total_hosts = len(self.results)
        total_ports = sum(len(data.get("ports", [])) for data in self.results.values())
        total_vulns = sum(self.count_vulnerabilities(data.get("vulnerabilities_ai", "")) for data in self.results.values())
        print_status(f"[+] Scan Summary: Hosts: {total_hosts}, Ports: {total_ports}, Vulnerabilities (AI): {total_vulns}", "info")
        report_md += "**Scan Summary:**\n"
        report_md += f"- Hosts Scanned: {total_hosts}\n"
        report_md += f"- Ports Scanned: {total_ports}\n"
        report_md += f"- Vulnerabilities Found (AI): {total_vulns}\n\n"
        for host, data in self.results.items():
            report_md += f"## Host: {host} ({data.get('hostname', 'Unknown')})\n"
            report_md += f"| Port  | State | Service | Version | Banner |\n"
            report_md += f"|-------|-------|---------|---------|--------|\n"
            for port in data.get("ports", []):
                report_md += f"| {port['port']}/tcp | {port['state']} | {port['service']} | {port['version']} | {port.get('banner', 'N/A')} |\n"
                if "ssl_scan" in port:
                    report_md += f"\n**SSL Scan Result:**\n```\n{port['ssl_scan']}\n```\n"
                report_md += f"\n**Vulnerability Lookup Result:**\n```\n{port.get('vulnerabilities', 'No vulnerabilities found.')}\n```\n"
            report_md += "\n## AI Vulnerability Analysis\n\n"
            report_md += data.get("vulnerabilities_ai", "No vulnerabilities identified.") + "\n\n"
        # Append executive summary generated by a static method
        exec_summary = self.generate_executive_summary(self.results)
        report_md += "\n" + exec_summary + "\n"
        with open(self.output_path, "w") as f:
            f.write(report_md)
        print_status(f"[+] Report saved to {self.output_path}", "success")

    @staticmethod
    def generate_executive_summary(results):
        # Detailed narrative summary, potentially using Ollama integration.
        total_hosts = len(results)
        total_ports = sum(len(info.get("ports", [])) for info in results.values())
        exposures = {}
        for mode in ["int", "ext"]:
            for entry in results.get(mode, []):
                for port in entry.get("ports", []):
                    if port.get("state", "").lower() == "open":
                        service = port.get("service", "unknown")
                        exposures[service] = exposures.get(service, 0) + 1
        summary = "## Executive Summary\n\n"
        summary += f"Across the network scan, **{total_hosts} host{'s' if total_hosts != 1 else ''}** were analyzed, with **{total_ports} open ports** identified.\n\n"
        if exposures:
            summary += "### Key Observations:\n"
            for service, count in exposures.items():
                summary += f"- **{service.capitalize()}** was detected on {count} host{'s' if count != 1 else ''}.\n"
        else:
            summary += "No significant service exposures were detected.\n"
        summary += "\n### Recommendations:\n"
        summary += "- Review any hosts with critical services exposed.\n"
        summary += "- Harden remote access services and ensure proper authentication is in place.\n"
        summary += "- Consider deploying additional monitoring and intrusion detection measures.\n"
        summary += "\nA detailed review of the full scan report is recommended to prioritize remediation efforts.\n"
        return summary

    @staticmethod
    def count_vulnerabilities(vulnerabilities_text):
        return len(re.findall(r'\*\*Vulnerability \d+:', vulnerabilities_text))